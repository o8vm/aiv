#!/bin/sh
#
#######################################################################
# Initial Configuration
#######################################################################
# 
# === Initialize Shell Environment ====================================
set -u
umask 0022
export LC_ALL='C'
export PATH="$(command -p getconf PATH)${PATH:+:}:${PATH:-}"

# === Basic Configuration =============================================
CONFIG_DIR="$HOME/.config/aiv"
CONFIG_FILE="$CONFIG_DIR/config" 
CONVERSATION="$CONFIG_DIR/conversation"

# === Usage Printing Function =========================================
print_usage_and_exit () {
  cat <<-USAGE 1>&2
				${0##*/} - AI Valve: Pipes for AI
				Usage   : ${0##*/} [options] [prompt]
				Options : -c [file_pattern|-] Add context from files (glob pattern) or stdin (-)
				                              In case there is no prompt in stdin(-), it will
				                              only be added to the context.
				          -r                  Repeat the input before output
				          -e                  Continue previous conversation thread
				          -m MODEL            Use specified model
				                              (default: claude-3.7-sonnet-latest)
				          -h                  Display this help message
				          -v                  Display version information
				          -s [prompt]         Overwite system prompt
				Version : Sun Mar  2 14:23:42 JST 2025
				USAGE
  exit 1
}

# === Define Error Exit Function =======================================
error_exit () {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === JSON Functions ===================================================
json_escape() {
  sed '
    s/\\/\\\\/g;
    s/"/\\"/g;
    s/'"$(printf '\b')"'/\\b/g;
    s/'"$(printf '\f')"'/\\f/g;
    s/'"$(printf '\t')"'/\\t/g;
    s/'"$(printf '\r')"'/\\r/g;
  ' | awk '
    BEGIN {
      ORS="";
      first=1
    }
    {
      if (first) {
        first=0
      } else {
        print "\\n"
      }
      gsub(/\n/, "\\n")
      print $0
    }
  '
}

json_extract() {
  awk '{
    gsub(/\\\\n/, "\n")
    gsub(/\\n/, "\n")
    gsub(/\\\\t/, "\t")
    gsub(/\\t/, "\t")
    gsub(/\\\\r/, "\r")
    gsub(/\\r/, "\r")
    gsub(/\\\\b/, "\b")
    gsub(/\\b/, "\b")
    gsub(/\\\\f/, "\f")
    gsub(/\\f/, "\f")
    gsub(/\\\\"/, "\"")
    gsub(/\\"/, "\"")
    gsub(/\\\\\\\\/, "\\")
    gsub(/\\\\/, "\\")
    gsub(/^"|"$/, "")
    print
  }'
}

#######################################################################
# Prepare for the Main Routine
#######################################################################

# === Ensure Config ===================================================
[ -d "$CONFIG_DIR" ] || mkdir -p "$CONFIG_DIR"
[ -f "$CONFIG_FILE" ] || error_exit 1 "config file not found"

# === Load Config File ================================================
API_KEY=
MODEL=
MAX_TOKENS=
SYS_PROMPT=

while IFS='=' read -r key value; do
  value=$(printf "%s\n" "$value"                      |
    sed -e 's/^"//' -e 's/" *$//'                     |
    tr -d '\n'                                        )
  case "$(echo "$key" | tr '[:upper:]' '[:lower:]')" in
    api_key) API_KEY="$value"                        ;;
    model) MODEL="$value"                            ;;
    max_tokens) MAX_TOKENS="$value"                  ;;
    system_prompt|sys_prompt) SYS_PROMPT="$value"    ;;
  esac
done << END
$(cat "$CONFIG_FILE"                                  |
sed 's/#.*$//'                                        |
sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'     |
grep -v '^$'                                          |
grep -Ei '^(API_KEY|MODEL|MAX_TOKENS|SYS_PROMPT)='    ) 
END

# === Parse Arguments =================================================

CONTXT_FILE=
EXTEND_PREV=
REPEAT_INPT=
PROMPT_ARG=
while getopts :c:earm:s:h opt
do
  case $opt in
    c)      CONTXT_FILE="$CONTXT_FILE $OPTARG"       ;;
    e)      EXTEND_PREV=true                         ;;
    r)      REPEAT_INPT=true                         ;;
    m)      MODEL="$OPTARG"                          ;;
    s)      SYS_PROMPT="$OPTARG"                     ;;
    h | v ) print_usage_and_exit                     ;;
    '?')    error_exit 1 "Invalid Option: -$OPTARG"  ;;
  esac
done
shift $((OPTIND - 1))
PROMPT_ARG="$*"

# === Ensure Conversation File ========================================
touch $CONVERSATION

if [ ! -f "$CONVERSATION" ] || [ "$EXTEND_PREV" != "true" ]; then
  if [ -n "$SYS_PROMPT" ]; then
    printf "%s" "$SYS_PROMPT"                         |
    json_escape                                       |
    sed 's/^\(.*\)$/"system":"\1","messages":[/'      \
    > "$CONVERSATION"
  else
    printf "%s\n" '"messages":['                      \
    > "$CONVERSATION"
  fi 
fi


#######################################################################
# Main Routine
#######################################################################
 
# === Build Contents ==================================================
awk -v ctx="$CONTXT_FILE" -v prompt="$PROMPT_ARG"   ' #
    BEGIN {                                           #
      pipe_status = system("test -t 0")               #
      pipe_exists = (pipe_status != 0)                #
      if (length(ctx) > 0) {                          #
        split(ctx, temp_files, " ")                   #
        for (i in temp_files) {                       #
          if (temp_files[i] != "-" &&                 #
                length(temp_files[i]) > 0) {          #
            cmd = "ls " temp_files[i]                 #
            while ((cmd | getline file) > 0) {        #
              files[++count] = file                   #
            }                                         #
            close(cmd)                                #
          } else if (temp_files[i] == "-") {          #
            files[++count] = "-"                      #
          }                                           #
        }                                             #
      }                                               #
      context = 0;                                    #
      for (i in files) {                              #
        if (files[i] == "-") {                        #
          context = 1                                 #
        } else if  (length(files[i])) {               #
          print "---CONTEXT_FILE:[" files[i] "]---"   #
          system("cat \"" files[i] "\"")              #
          print "---END---"                           #
        }                                             #
      }                                               #
      if (!pipe_exists && !context) {                 #
        printf("%s", prompt);                         #
        exit 0;                                       #
      }                                               #
    }                                                 #
    {                                                 #
      if (NR == 1) {                                  #
        if (context) print "---CONTEXT_TEXT---"       #
        else printf("%s\n---STDIN---\n", prompt);     #
      }                                               #
      print                                           #
    }                                                 #
    END {                                             #
      if (context) {                                  #
        print "---END---"                             #
        printf("%s", prompt);                         #
      } else if (NR>0) {                              #
        print "---END---"                             #
      } else if (pipe_exists && NR == 0) {            #
        printf("%s", prompt);                         #
      }                                               #
  }'                                                  |
awk '                                                 #
/^---CONTEXT_TEXT---$|^---STDIN---$/ {                #
  in_sec = 1                                          #
  sec_type = ($0 ~ /CONTEXT/) ? "ctx" : "stdin"       #
  sec_header = $0                                     #
  sec_cont = ""                                       #
  next                                                #
}                                                     #
/^---END---$/ {                                       #
  if (in_sec) {                                       #
    # Process the buffered sec                        #
    if (length(sec_cont) > 0) {                       #
      # Remove leading/trailing newlines              #
      gsub(/^\n+|\n+$/, "", sec_cont)                 #
                                                      #
      # Count lines in content                        #
      num_lines = split(sec_cont, lines, "\n")        #
                                                      #
      # Find first non-empty line for final search    #
      first_line = ""                                 #
      for (i = 1; i <= num_lines; i++) {              #
        if (length(lines[i]) > 0) {                   #
          first_line = lines[i]                       #
          break                                       #
        }                                             #
      }                                               #
                                                      #
      search_pattern = ""                             #
      for (i = 1; i <= num_lines; i++) {              #
        trimmed = lines[i]                            #
        gsub(/[ \t]/, "", trimmed)                    #
        if (length(trimmed) > 5) {                    #
          if (search_pattern != "") {                 #
            search_pattern = search_pattern "\\n"     #
          }                                           #
          # Escape special chars                      #
          esc_line = lines[i]                         #
          gsub(/'\''/, "'\''\"'\''\"'\''", esc_line)  #
          search_pattern = search_pattern esc_line    #
        }                                             #
      }                                               #
                                                      #
      # Find best matching file using grep -F         #
      cmd = "printf '%s' '\''" search_pattern "'\'' |"\
            "grep -r                                 "\
            "--exclude-dir target                    "\
            "--exclude-dir .git                      "\
            "--exclude chat.md                       "\
            "-Fnf - . 2>/dev/null                   |"\
            "cut -d: -f1                            |"\
            "uniq -c                                |"\
            "sort -nr                               |"\
            "head -1                                |"\
            "awk '\''{print $2}'\''"                  #
                                                      #
      best_file = ""                                  #
      loc = ""                                        #
      if ((cmd | getline best_file) > 0) {            #
        if (first_line != "") {                       #
          gsub(/'\''/, "'\''\"'\''\"'\''", first_line)#
          cmd2 = "grep -Fn '\''" first_line "'\''    "\
                 "\"" best_file "\" 2>/dev/null     |"\
                 "head -1                           |"\
                 "cut -d: -f1"                        #
          ln_s = ""                                   #
          if ((cmd2 | getline ln_s) > 0) {            #
            ln_e = ln_s + num_lines - 1;              #
            loc = "[" best_file ":" ln_s ":" ln_e "]" #
          }                                           #
          close(cmd2)                                 #
        }                                             #
      }                                               #
      close(cmd)                                      #
                                                      #
      # Print sec with location                       #
      if (sec_type == "ctx") {                        #
        printf("---CONTEXT_TXT:%s---\n", loc)         #
      } else if (sec_type = "stdin") {                #
        printf("---STDIN:%s---\n", loc)               #
      }                                               #
      print sec_cont                                  #
    } else {                                          #
      # Non-context sec, print as-is                  #
      print sec_header                                #
      if (length(sec_cont) > 0) {                     #
        print ""                                      #
        print sec_cont                                #
      }                                               #
    }                                                 #
                                                      #
    in_sec = 0                                        #
    sec_cont = ""                                     #
  }                                                   #
  print                                               #
  next                                                #
}                                                     #
{                                                     #
  if (in_sec) {                                       #
    if (length(sec_cont) > 0) {                       #
      sec_cont = sec_cont "\n" $0                     #
    } else {                                          #
      sec_cont = $0                                   #
    }                                                 #
  } else {                                            #
    print                                             #
  }                                                   #
}'                                                    |
json_escape                                           |
sed 's/^\(.*\)$/{"role":"user","content": "\1"}/'     |
{                                                     #
  if [ -s "$CONVERSATION" ] &&                        #
    tail -c 2 "$CONVERSATION" | grep -q '\[';         #
  then                                                #
    cat                                               #
  else                                                #
    sed 's/^/,/'                                      #
  fi                                                  #
}                                                     |
tee -a "$CONVERSATION"                                |
if [ -n "$REPEAT_INPT" ]; then
  sed 's/.*---STDIN.*---\\n\(..*\)\\n---END---.*/\1/' |
  json_extract
else
  cat - >/dev/null
fi

# === End If We Have Only Context =====================================
if [ -z "$PROMPT_ARG" ] &&
   printf "%s" "$CONTXT_FILE" | grep -Eq '(^-| - |-$)';
then
  exit 0
fi

# === API Request & Response Processing ===============================

# Anthropic
URL="https://api.anthropic.com/v1/messages"
BODY_PARTS="{\"model\":\"$MODEL\",\"max_tokens\":$MAX_TOKENS,"
HEADERS=$(cat <<HEADERS
x-api-key: $API_KEY
anthropic-version: 2023-06-01
content-type: application/json
HEADERS)

REQ_CMD=
if command -v curl >/dev/null 2>&1; then
  HEADERS=$(printf "%s" "$HEADERS"                    |
            sed 's/.*/-H "&" /'                       |
            tr -d '\n')
  REQ_CMD="curl -s $URL $HEADERS -d @-"
else
  error_exit 1 "curl not found"
fi

cat "$CONVERSATION"                                   |
sed -e '1s/^/'"$BODY_PARTS"'/' -e '$s/$/]}/'          |
tr -d '\n'                                            |
eval "$REQ_CMD"                                       |
sed 's/.*"content":\[{\(.*"}\)\],.*/\1/'              |
sed 's/.*"text":\(".*[^\]}\)$/\1/'                    |
sed 's/^/,{"role": "assistant", "content": /'         |
tee -a "$CONVERSATION"                                |
sed 's/.*"content": "\(.*\)"}$/\1/'                   |
json_extract
